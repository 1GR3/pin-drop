body {
    margin: 0;
    padding: 0;
    background: #111727;

    .controls {
        z-index: 10;
        display: flex;
        padding: 48vh 1vw;
        justify-content: space-between;
        position: absolute;
        width: 98vw;

        button {
            background-color: rgba(white, 0.25);
            padding: 1rem;
            border-radius: 50%;
            border: none;
            width: 47.5px;
            text-align: center;
            transition: all 0.25s;

            &:hover {
                background-color: white;
            }
        }
    }

    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: 1;

        svg {
            width: 100vmin;
            height: 100vmin;
            fill: orange;
        }

        #shadow-svg {
            stroke: white;
            transform: scaleY(.25);
        }

        .logo {
            //width: 50vw;
            max-height: 20vh;
            max-width: 46vw;
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);

        }

        &#live2,
        &#live3 {
            .logo {
                filter: grayscale(100%) brightness(200%);
            }
        }

        &#var1,
        &#var2,
        &#var3 {
            #shadow-svg {
                display: none;
            }
        }

        &#var1 {
            background-color: white;
        }

        &#var2 {
            background-color: #6a6766;
        }
    }
}


// Define total segments and color pairs for states
$segment-count: 180;

$states: (
    company: (start: #EC5935, middle: #8FAAE2, rotation: 45deg),
    homepage: (start: #EC5935, middle: #911C58, rotation: 45deg),
    partner: (start: #F4B53F, middle: #911C58, rotation: 0deg),
    platform: (start: #B1E088, middle: #8FAAE2, rotation: -90deg),
    solutions: (start: #F4B53F, middle: #EC5935, rotation: 90deg),
    live1: (start: #EC5935, middle: #911C58, rotation: 45deg),
    live2: (start: #B1E088, middle: #8FAAE2, rotation: -90deg),
    live3: (start: #F4B53F, middle: #911C58, rotation: 0deg),
    live4: (start: #F4B53F, middle: #EC5935, rotation: 90deg),
    var1: (start: #c7c7cc, middle: #bcb4b1, rotation: -20deg),
    var2: (start: #FFFFFF, middle: #e0e0e0, rotation: -20deg),
    var3: (start: #FFFFFF, middle: #d8dee3, rotation: -20deg),
);

// Mixin for generating sinusoidal gradients
@mixin gradient($state, $start-color, $middle-color, $rotation) {
    svg#circle-svg {
        #circle-pattern {
            // Adjust rotation to compensate for 90Â° clockwise offset
            transform: rotate($rotation + 90deg);
        }

        #shadow-svg {
            stroke: $middle-color; // Apply middle color to the shadow
        }
    }

    // Calculate sinusoidal gradient for circle segments
    $pi: 3.14159265359; // Pi constant

    @for $i from 0 through $segment-count - 1 {
        // Map the index to a sinusoidal range (0 to 1)
        $sin-factor: (
            sin(($i / $segment-count) * $pi * 2) + 1) / 2;

        // Convert sinusoidal factor to a percentage for mix()
        $weight: $sin-factor * 100%;

        // Interpolate between the two colors based on the sinusoidal factor
        $color: mix($start-color, $middle-color, $weight
        );

    .line-group-#{$i} {
        circle {
            fill: $color;
        }
    }
}
}

// Loop through states and generate styles dynamically
@each $state, $props in $states {
    ##{$state} {
        @include gradient($state,
            map-get($props, start),
            map-get($props, middle),
            map-get($props, rotation));
    }
}