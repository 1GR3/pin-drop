body {
    margin: 0;
    padding: 0;
    background: #111727;

    .controls {
        z-index: 10;
        position: relative;
    }

    .container {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        width: 100vw;
        height: 100vh;
        overflow: hidden;
        z-index: 1;

        svg {
            width: 100vmin;
            height: 100vmin;
            fill: orange;
        }

        #shadow-svg {
            filter: blur(10px);
            // stroke-width: 5px;
            stroke: white; // Default stroke color
        }
    }
}

// Define total segments and color pairs for states
$segment-count: 180;

$states: (
    company: (start: #8FAAE2, middle: #EC5935, rotation: 45deg),
    homepage: (start: #911C58, middle: #EC5935, rotation: 45deg),
    partner: (start: #911C58, middle: #F4B53F, rotation: 0deg),
    platform: (start: #8FAAE2, middle: #B1E088, rotation: -90deg),
    solutions: (start: #EC5935, middle: #F4B53F, rotation: 90deg)
);

// Mixin for generating gradients
@mixin gradient($state, $start-color, $middle-color, $rotation) {
    svg#circle-svg {
        #circle-pattern {
            transform: rotate($rotation);
        }

        #shadow-svg {
            stroke: $middle-color; // Apply middle color to the shadow
        }
    }

    // Calculate gradient for circle segments
    $midpoint: $segment-count / 2;

    @for $i from 0 through $segment-count - 1 {
        $color: if($i <=$midpoint,
                mix($start-color, $middle-color, ($i / $midpoint) * 100%), // From start to middle
                mix($middle-color, $start-color, (($i - $midpoint) / $midpoint) * 100%) // Back to start
            );

        .line-group-#{$i} {
            circle {
                fill: $color;
            }
        }
    }
}

// Loop through states and generate styles dynamically
@each $state, $props in $states {
    ##{$state} {
        @include gradient($state,
            map-get($props, start),
            map-get($props, middle),
            map-get($props, rotation));
    }
}